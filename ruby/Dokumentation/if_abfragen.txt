If Anweisungen

	Die Überprüfung einer oder mehrerer Bedingungen findet in if -- Blöcken statt
	Müssen mehrere Bedingungen überprüft werden, dann findet eine Verknüpfung mit dem Und - Operator (&&) statt:

		if typ.is_a?(String) && typ.size > 2
	Es müssen beide Bedingungen true sein, damit die Anweisung in dem Block asgeführt werden 
	Muss von mehreren Bedingungen eine zutreffen ist die Verwendung des Oder - Operators sinnvoll:
		îf bedingung1 || bedingung2
	Wenn eine der Bedingungen zurifft werden die Anweisunggen im Block ausgeführt
		if - elsif - else - end		Konstrukt:

		def typ=(typ)
       	if !typ.is_a?(String)  						#.is_a?(String) vergleicht nach einem String
    			puts "War kein String"
    	elsif typ.size < 3
    		puts "String zu kurz"
    	else
    		@typ = typ.to_s.capitalize 				#.capitalize Macht aus dem 1. Buchstaben einen Großen
    	end 
    end

    Kurzform der If Anweisung:

    	def ps=(ps)
    		@ps = ps if ps > 0
    	
    	end

    	Steht am Ende einer Anweisung (in der gleichen Zeile) eine if - bedingung, dann wird die vorgehende Anweisung 
    	(z.B.: Zuordnung eines Wertes) nur ausgeführt, wenn die Bedingung true ist.

    Tenärer Operator

    	Es gibt die Möglichkeit einen if - else Block in einer Zeile auszuführen:
    		puts car.typ == "" ? "Kein Wert!" : car.typ

    	Die Anweisung puts, also erzeuge eine Ausgabe, bekommt den Wert 'Kein Wert!' falls die Bedingung
    	'car.typ.empty == ""' leer ist; bzw. den aktuellen Objekt - Wert für 'typ' falls dieser gefüllt ist

    	Das Fragezeichen ist ein Operator der die Linksstehende Bedingung von den auszuführenden Anweisungen trennt.
    	Der Doppelpunkt fungiert als Kurzform von 'else'