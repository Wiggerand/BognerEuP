OOP

Klassen
	Klassen bilden den Plan von Konkreten Objekten.
	Definition.
		class Player

		end

		Eine Klasse wird durch die Verwendung des Schlüsselwortes class definiert.
		Die Definition ist immer in einem Block eingeschlossen.

Objekt:
	Wenn ich in einer Klasse arbeiten will, dadnn erzeuge ich ein Objekt, das in einer Variable gespeichert wird.
		obj = Player.new
	Ein neues Objekt wird in einer Variablen mit beliebiger Bezeichnung gespeichert.
	Es wird mit dem Namen der Klasse und dem Aufruf der Methode new erzeugt.
	Das Objekt hat alle Eigenschaften (Attribute) und Fähigkeiten (Methoden), die in der Klasse definiert sind.

Konstruktor:
	Beim erzeugen eines neuen Objektes mit Player.neww wird automatisch eine Methode 'initialize' aufgerufen. Diese Methode gibt es in jeder Ruby-Klasse. Es ist üblich diese existierende Methode mit einer eigenen Methode zu überschreibe, um dort die Basiswerte des Objektes festzulegen.
		
		def initialize(pname, phealth=100)
		@name = pname
		@health = phealth
	end
Instanzvariable / Eigenschaft
	In der OOP hat ein Objekt bestimmte Eigenschaften, die es charakterisieren.
	In Ruby werden diese Eigenschaften als Instanzvariablen deffiniert ein @ wird dem Namen vorangestellt.
	Beispiel: @name
	Das besondere einer Instanzvariablen oder Eigenschaft ist, das sie in der ganzen klasse gilt und verwertet werden kann.
	Wichtig: Variablen die innerhalb von einem Block definiert werden und kein @ vorangestellt haben, sind sogenannte lokale Variablen und gelten nur innerhalb des Blocks in dem sie definiert sind.

	Eine Instanzvariable wird zu einer Eigenschaft,
	indem es in der Klasse Methoden gibt die den Zugriff von Außerhalb (Aufruf durch das Objekt) ermöglichen.
	Eine Eigenschaft hat einen sogenannten Setter, der es ermöglicht einen Wert zu setzen; und einen Getter, der einen Wert zurückgibt.

	Getter:
		def name
			@name
		end
		Die Methode heisst genauso wie die Instanzvariable, ohne das @. Sie hat die Aufgabe, den Wert der Instanzvariable name zurückzugeben.
		Aufruf:
			puts obj.name
			gibt den Namen des Players aus
			Kurzform:
				Anstelle einer Methodendefinition kann ich eine Kurzform verwenden:
					attr_reader :name

	Setter:
		def name=(name)
			@name = name
		end
		er Setter zum Speichern eines Wertes in einer Instanzvariablen heißt wie die Instanzvariable mit einem = im Namen.
		Aufruf:
			obj.Name = "Supergirl"

		Kurzform:
			attr_writer :name

	Kurzform für Setter und Getter:
		attr_accessor :name

		Virtuelles Attribut:
		Ein virtuelles Attribut ist eine Methode die so aussieht wie eine Eigenschaft, bzw genutzt werden kann, wie eine Eigenschaft, die allerdings keine eigene Instanzvariable hat; also keine echte Eigenschaft ist, obwohl sie so aussieht.
			def normalized_health
				@health * 1000
			end
		Aufruf:
			puts obj.normalized_health
			